20201020
1.引用在数组上的使用
    int getLen(int arr[10]) {
    // TODO
    return sizeof(arr) / sizeof(arr[0]);
    }
    // 调用
    int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
    std::cout << getLen(arr) << std::endl;  // 8/4 = 2
    return 0;
    }

    函数在传参的时候，实际上是创建了一个新的指针指向原始的数组，本质上是发生了一次拷贝，那我们只需要进制拷贝即可，
    而引用便可以解决这个问题。，我们改为传递引用。
2.fix 数组引用 
    int refGetLen(int (&arr)[10]) {
        // TODO
        return sizeof(arr) / sizeof(arr[0]); 
    }
    //int& arr[10],不合法，引用只是别名，本身不占用内存，数组占用，所以这里的引用的数组矛盾。

3.模板
2存在问题：传入的arr类型不一致、arr个数不一致都将失败
fix 使用模板
    template <typename Type, int Number>
    int tGetLen(Type (&arr)[Number]) {
        // TODO
        return sizeof(arr) / sizeof(arr[0]);
    }

4.debug技巧  如何查看auto的类型

<code
    char s[10] = "hello";
    auto type = s;

    Q:type类型到底是char *还是char[10]呢？

    template <typename>
    struct TD;

    char s[10] = "hello";
    auto type = s 
>










