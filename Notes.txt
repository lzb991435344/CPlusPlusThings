20201020
1.引用在数组上的使用
    int getLen(int arr[10]) {
    // TODO
    return sizeof(arr) / sizeof(arr[0]);
    }
    // 调用
    int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
    std::cout << getLen(arr) << std::endl;  // 8/4 = 2
    return 0;
    }

    函数在传参的时候，实际上是创建了一个新的指针指向原始的数组，本质上是发生了一次拷贝，那我们只需要进制拷贝即可，
    而引用便可以解决这个问题。，我们改为传递引用。
2.fix 数组引用 
    int refGetLen(int (&arr)[10]) {
        // TODO
        return sizeof(arr) / sizeof(arr[0]); 
    }
    //int& arr[10],不合法，引用只是别名，本身不占用内存，数组占用，所以这里的引用的数组矛盾。

3.模板
2存在问题：传入的arr类型不一致、arr个数不一致都将失败
fix 使用模板
    template <typename Type, int Number>
    int tGetLen(Type (&arr)[Number]) {
        // TODO
        return sizeof(arr) / sizeof(arr[0]);
    }

4.debug技巧  如何查看auto的类型

<code
    char s[10] = "hello";
    auto type = s;

    Q:type类型到底是char *还是char[10]呢？

    template <typename>
    struct TD;

    char s[10] = "hello";
    auto type = s;
    TD<decltype(type)>(); // error
    error处结果为：error: invalid use of incomplete type ‘struct TD<char*>’

    gdb中使用ptype
>

5.面试区间问题
 5.1 区间并集

    输入: intervals = [[1,3],[2,6],[8,10],[15,18]]
    输出: [[1,6],[8,10],[15,18]]
    解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].


    解决：
    只要这个区间按照第一个元素(区间开始，记作first)排序，那么区间合并只需要关注已经合并区间的最后一个区
    间的last(第二个元素)与新区间的first(第一个元素)。
    <code
            class Solution {
        public:
            vector<vector<int>> merge(vector<vector<int>>& intervals) {
                vector<vector<int>> ans;
                int n = intervals.size();
                if (n == 0 || n == 1) return intervals;
                sort(intervals.begin(), intervals.end(), [](auto& x, auto & y) {
                    return x[0] < y[0];
                });

                ans.push_back(intervals[0]);
                for (int i = 1; i < n; i++) {
                    // 拿到合并好的区间的最后一个区间
                    auto& last = ans.back();

                    // 新区间的第一个元素与最后一个区间的第二个元素比较
                    if (intervals[i][0] > last[1]) { // 产生了新区间
                        ans.push_back(intervals[i]);
                    } else if (intervals[i][1] > last[1]) { 
                        last[1] = intervals[i][1];
                    } 
                }

                return ans;
            }
        };
    >


    5.2 区间合集

    输入：A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
    输出：[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

        我们需要区分有交集与没有交集情况。
        现有如下两个区间求交集。
        [a1,a2]
        [b1,b2]
        没有交集
        那就是两种情况：1） a2 < b1 2） a1 > b2

        有交集 a2>=b1 && a1 <= b2
        可以发现，有交集就是下面区间:

        [max(a1, b1), min(a2, b2)]

    <code
    
            class Solution {
        public:
            vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
                vector<vector<int>> ans;
                int i = 0, j = 0;
                while (i < A.size() && j < B.size()) {
                    int a1 = A[i][0];
                    int a2 = A[i][1];
                    int b1 = B[j][0];
                    int b2 = B[j][1];
                    //  a2 < b1 || a1 > b2 无交集
                    if (a2 >= b1 && a1 <= b2) {
                        ans.push_back({max(a1, b1), min(a2, b2)});
                    }
                    if (b2 < a2) {
                        j++;
                    } else {
                        i++;
                    }
                }

                return ans;
            }
        };
    
    >


 6.岛屿问题
    

